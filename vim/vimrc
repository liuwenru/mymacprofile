"         Plug 插件配置  [START]
call plug#begin('~/.vim/plugged')
" 文件树浏览插件
Plug 'https://github.com/scrooloose/nerdtree.git'

" 彩虹括号插件
Plug 'https://github.com/luochen1990/rainbow.git'

" vim theme onedark
Plug 'https://github.com/joshdick/onedark.vim.git'

" 代码大纲插件
Plug 'https://github.com/preservim/tagbar.git'

" 代码缩进显示
Plug 'https://github.com/Yggdroot/indentLine.git'

" 代码自动格式化
Plug 'https://github.com/Chiel92/vim-autoformat.git'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }

" 代码自动化注释插件
Plug 'preservim/nerdcommenter'

" vim 下方的状态栏插件
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 代码自动补齐插件
Plug 'https://github.com/Valloric/YouCompleteMe.git',{ 'commit':'b6e8c64d96b02d60b3751d6a51af7dc958054f8f' }
Plug 'sheerun/vim-polyglot'

" YouCompleteMe 自动生成ycm_extra_conf.py配置文件
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}

" Dockerfile plugin
Plug 'ekalinin/Dockerfile.vim'

" Golang 开发插件
Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" 搜索插件
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'dyng/ctrlsf.vim' " 代码搜索插件 安装该插件前，需要先安装 ack ag gt rg

" vim bookmark书签插件
Plug 'MattesGroeger/vim-bookmarks'

" vim asyncrun 异步执行命令插件
Plug 'https://github.com/skywind3000/asyncrun.vim'

" vim 高亮选择内容
Plug 'machakann/vim-highlightedyank'

" vim editorconfig 的支持
Plug 'editorconfig/editorconfig-vim'

" vim git svn状态显示
if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif

call plug#end()
"         Plug 插件配置  [END]

"  ---------------------VIM 文本编辑器相关配置---------------------
" 设置制表符等于多少空格
set expandtab  " 配置使用空格代替Tab
set smarttab " 删除tab打出来的空格时一个删除键就删除
set softtabstop=2 " 每次退格将删除X个空格
set shiftwidth=2 " 使用每层缩进的空格数
set tabstop=2  " 配置tab占用的空格数量
set autoindent
set autoread  " 设置文件修改时自动reload
set syntax=on " 配置语法高亮
set ignorecase " 设置搜索时忽略大小写
set number " 显示行号
set backspace=2 " 兼容mac 下vim的退格键配置
set so=5  " 屏幕滚动时在光标上下方保留5行预览代码
set pastetoggle=<F10> " 解决在xshell等终端中使用ctrl+v黏贴时格式错乱的问题
syntax on
set hlsearch " 高亮搜索内容
set keymodel=startsel,stopsel " 使用'Shift + 方向键'选择文本
set selection=inclusive " 指定在选择文本时，光标所在位置也属于被选中的范围

" vim 颜色主题配置
" 使用onedark主题配色
colorscheme onedark
" hi Normal ctermfg=grey ctermbg=black
hi Normal ctermfg=grey
filetype plugin on

" 映射vim分屏时垂直修改宽度的方法
nmap <S-l> :vertical resize +10<CR>
nmap <S-h> :vertical resize -10<CR>
nmap <S-j> :resize +10<CR>
nmap <S-k> :resize -10<CR>
" nmap <A-s> :split<CR>
" nmap <A-v> :vsplit<CR>

" set cursorcolumn " 配置显示竖定位符
set cursorline " 配置显示横行定位符
set encoding=utf-8
set ambiwidth=double " 设置为双字宽显示
set nobackup " 不生成备份文件

" 设置代码折叠配置
"
set foldmethod=manual

"  ---------------------VIM 插件的相关配置---------------------

"  **********NEDTree 配置**********
let NERDTreeShowHidden=1 " 显示隐藏目录
let NERDTreeWinPos='left'
let NERDTreeWinSize=30
map wm :NERDTreeToggle<CR>
" 如果打开目录自动启动插件
" 如果没有指定任何文件，当 vim 启动时，如何自动打开 NERDTree
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 当 vim 打开一个目录时，我如何自动打开 NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" 唯一打开的窗口是一个 NERDTree 使用q 关闭vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" **********rainbow 配置**********
let g:rainbow_active = 1 " # 彩虹括号插件, 默认启用插件

" **********LeaderF 搜索配置**********
" # 需要安装依赖 dnf install ripgrep  brew install ripgrep
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
" 搜索时使用方向建控制上下
let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}

" **********vim-airline 插件配置**********
let g:airline_powerline_fonts = 0
let g:airline#extensions#tabline#enabled = 1
" # 关闭状态显示空白符号计数"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_theme='onedark'
let g:onedark_termcolors=256
"
" vim-buftabline 配置快速切换vim上的table , 详细的快捷键可以查看此处文档  http://vimdoc.sourceforge.net/htmldoc/windows.html
set hidden
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

" **********indentLine 代码缩进控制**********
let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" **********tagbar 显示代码大纲**********
" # 安装之前请不要忘记安装Ctags，为了使用最新的版本，还是建议使用源码编译安装
" # 对golang的提示可能需要安装 go install github.com/jstemmer/gotags@latest
nmap <F8> :TagbarToggle<CR>

" **********vim-format 自动格式化**********
" bash,sh 自动格式化安装 go install mvdan.cc/sh/v3/cmd/gosh@latest go install mvdan.cc/sh/v3/cmd/shfmt@latest
" python自动格式化请安装 pip3 install autopep8
" xml/html 需要安装  brew install tidy-html5  dnf install tidy
" json 和 html 需要 npm install js-beautify -g  
" npm install -g js-beautify standard eslint xo stylelint stylelint-config-standard typescript-formatter purty remark-cli fixjson
" SQL文件格式化 pip3 install sqlparse
noremap <F3> :Autoformat<CR>
let g:autoformat_verbosemode=1 "开启详细模式便于查错
" sql文件格式化参数配置
let g:formatdef_sqlformat = '"sqlformat --keywords upper -"' 
let g:formatters_sql = ['sqlformat']

" C 格式化文件参数
" 自动格式化C 源码文件  安装需要额外插件 yum install clang  brew install clang-format
let g:formatdef_clangformat_google = '"clang-format -style google -"'  
let g:formatters_c = ['clangformat_google']

" Golang代码格式化配置
let g:formatters_go = ['gofmt_2']

" 若要禁用回退到 vim 的缩进文件，重新制表并删除尾随空格，请将以下变量设置为0
" let g:autoformat_autoindent = 0
" let g:autoformat_retab = 0
" let g:autoformat_remove_trailing_spaces = 0
" 指定自定义指定格式化程序，例如如下配置
" let g:formatters_vue = ['eslint_local', 'stylelint']
" let g:run_all_formatters_vue = 1

" **********vim-prettier代码格式化**********

" **********nerdcommenter代码自动注释插件配置**********
let g:NERDCreateDefaultMappings = 0 "因为默认leader cc 是冲突的所以关闭默认映射
let g:NERDSpaceDelims = 1
" [count]cc 注释往下多少行
nmap cc <plug>NERDCommenterComment
nmap cu <plug>NERDCommenterUncomment
" 在方法开头插入注释
nmap cs <plug>NERDCommenterSexy

" **********ctrlsf 搜索插件配置**********
" 安装此插件需要安装
" linux     dnf install the_silver_searcher  ack ripgrep  https://github.com/monochromegane/the_platinum_searcher
" mac       brew install the_silver_searcher ack ripgrep pt  https://github.com/monochromegane/the_platinum_searcher

" **********vim-bookmarks  vim书签插件的使用**********
" 将书签文件保存至当前目录下，这样下次打开时就可以直接使用
let g:bookmark_save_per_working_dir = 1
let g:bookmark_auto_save = 1
let g:bookmark_highlight_lines = 1  " 是否高亮标记的行
" 也可以自定义书签目录使用下面的方法进行指定
" Finds the Git super-project directory.
"  function! g:BMWorkDirFileLocation()
"      let filename = 'bookmarks'
"      let location = ''
"      if isdirectory('.git')
"          " Current work dir is git's work tree
"          let location = getcwd().'/.git'
"      else
"          " Look upwards (at parents) for a directory named '.git'
"          let location = finddir('.git', '.;')
"      endif
"      if len(location) > 0
"          return location.'/'.filename
"      else
"          return getcwd().'/.'.filename
"      endif
"  endfunction

" **********vim-signify 配置 设置启动延迟**********
set updatetime=100

" **********Yggdroot/indentLine 代码缩进插件配置**********
" 解决vim中打开markdown文件时 文本标记无法显示的问题
let g:indentLine_fileTypeExclude = ['tex', 'markdown','json']
autocmd Filetype markdown let g:indentLine_setConceal = 0
autocmd Filetype markdown set conceallevel=0
let g:indentLine_defaultGroup = 'SpecialKey'
" let g:indentLine_color_term = 239
" let g:indentLine_bgcolor_term = 202
" let g:indentLine_bgcolor_gui = '#FF5F00'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" **********YouCompleteMe插件配置**********
" 解决MAC环境下打开VIM使用系统自带的Python导致错误
if has('mac')
    " 语言符号库文件库配置文件
    let g:ycm_global_ycm_extra_conf='~/tools/mymacprofile/vim/ycm_extra_conf_mac.py'
    let g:ycm_python_binary_path = 'python'  " 解决在python的visual_env中多个不同版本存在时出现依赖库不提示的问题
    let g:ycm_server_python_interpreter = '/usr/local/bin/python3'
elseif has('linux')
    " 语言符号库文件库配置文件
    let g:ycm_global_ycm_extra_conf='~/tools/mymacprofile/vim/ycm_extra_conf_linux.py'
    let g:ycm_python_binary_path = 'python'  " 解决在python的visual_env中多个不同版本存在时出现依赖库不提示的问题
    let g:ycm_server_python_interpreter = '/usr/bin/python3'
else
    echom "no support os platform......."
endif
"let $PATH .='/usr/local/opt/python@3.7/bin'
let g:ycm_seed_identifiers_with_syntax=1 " 开启基于语义的补全
let g:ycm_complete_in_strings = 1        " 在字符串收入中也能补全
let g:ycm_autoclose_preview_window_after_completion=1 " 补全后自动关机预览窗口
let g:ycm_log_level = 'debug'
" set completeopt=menu,menuone " 解决YCM中自带的函数原型预览功能
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_key_invoke_completion = '<C-l>' " 设置ycm的补全功能的唤出
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,erlang,perl,go': ['re!\w{2}','.'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }

" **********vim-go 语言开发配置**********
" let g:go_fmt_command = "goimports"
let g:go_highlight_operators = 1
let g:go_def_mode = 'godef'
let g:go_decls_includes = "func,type"

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
